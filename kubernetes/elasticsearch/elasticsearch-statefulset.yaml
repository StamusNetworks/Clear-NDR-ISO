---
# Source: elasticsearch/templates/configmap-initcontainer.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-initcontainer
  labels:
    app.kubernetes.io/name: elasticsearch
  namespace: logging
data:
  folder-setup.sh: |-
    #!/bin/bash

    set -o errexit
    set -o pipefail
    set -o nounset

    mkdir -p /data/$NODE_NAME/logs/

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  labels:
    service: elasticsearch
  namespace: logging
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      service: elasticsearch
  replicas: 1
  serviceName: es
  template:
    metadata:
      labels:
        service: elasticsearch
        serviceName: es
    spec:
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120

      initContainers:
      - name: configure-sysctl
        securityContext:
          runAsUser: 0
          privileged: true
        image: "docker.elastic.co/elasticsearch/elasticsearch:7.16.3"
        imagePullPolicy: "IfNotPresent"
        command: ["bash","-c"]
        args:
          - |
            sysctl -w vm.max_map_count=262144
            sysctl -w fs.file-max=65536

      - name: es-folder-prepare
        image: bitnami/minideb:buster
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        imagePullPolicy: "IfNotPresent"
        command:
        - /scripts/folder-setup.sh

        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000

        volumeMounts:
        - name: initcontainer-script
          mountPath: /scripts/folder-setup.sh
          subPath: folder-setup.sh
        - name: elasticsearch-data
          mountPath: /data

      containers:
      - name: elasticsearch
        image: "docker.elastic.co/elasticsearch/elasticsearch:7.16.3"
        env:
        - name: cluster.name
          value: elasticsearch.cluster.local
        - name: node.name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name

        - name: network.host
          value: "0.0.0.0"
        - name: cluster.deprecation_indexing.enabled
          value: "false"
        - name: node.roles
          value: "transform, data_frozen, master, remote_cluster_client, data, ml, data_content, data_hot, data_warm, data_cold, ingest"
        - name: discovery.type
          value: single-node
        - name: ingest.geoip.downloader.enabled
          value: "false"
        - name: xpack.security.enabled
          value: "false"
        # ES 7 with Java 9
        - name: ES_JAVA_OPTS
          value: "-Xms512m -Xmx512m -XX:HeapDumpPath=/data/$(node.name)/data -XX:ErrorFile=/data/$(node.name)/logs/hs_err_pid%p.log -Xlog:gc*,gc+age=trace,safepoint:file=/data/$(node.name)/logs/@loggc@:utctime,pid,tags:filecount=32,filesize=64m"

        - name: action.auto_create_index
          value: ".watches,.triggered_watches,.watcher-history-*,logstash-*,logstash-kube-*,logstash-systemd-*"

        - name: path.data
          value: "/data/$(node.name)/data"
        - name: path.logs
          value: "/data/$(node.name)/logs"

        ports:
        - containerPort: 9200
          name: http
        - containerPort: 9300
          name: transport

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000

        readinessProbe:
          exec:
            command:
              - bash
              - -c
              - |
                set -e
                # If the node is starting up wait for the cluster to be ready (request params: "wait_for_status=green&timeout=1s" )
                # Once it has started only check that the node itself is responding
                START_FILE=/tmp/.es_start_file

                # Disable nss cache to avoid filling dentry cache when calling curl
                # This is required with Elasticsearch Docker using nss < 3.52
                export NSS_SDB_USE_CACHE=no

                http () {
                  local path="${1}"
                  local args="${2}"
                  set -- -XGET -s

                  if [ "$args" != "" ]; then
                    set -- "$@" $args
                  fi

                  if [ -n "${ELASTIC_PASSWORD}" ]; then
                    set -- "$@" -u "elastic:${ELASTIC_PASSWORD}"
                  fi

                  curl --output /dev/null -k "$@" "http://127.0.0.1:9200${path}"
                }

                if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  HTTP_CODE=$(http "/" "-w %{http_code}")
                  RC=$?
                  if [[ ${RC} -ne 0 ]]; then
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with RC ${RC}"
                    exit ${RC}
                  fi
                  # ready if HTTP code 200, 503 is tolerable if ES version is 6.x
                  if [[ ${HTTP_CODE} == "200" ]]; then
                    exit 0
                  elif [[ ${HTTP_CODE} == "503" && "7" == "6" ]]; then
                    exit 0
                  else
                    echo "curl --output /dev/null -k -XGET -s -w '%{http_code}' \${BASIC_AUTH} http://127.0.0.1:9200/ failed with HTTP code ${HTTP_CODE}"
                    exit 1
                  fi

                else
                  echo 'Waiting for elasticsearch cluster to become ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" "--fail" ; then
                    touch ${START_FILE}
                    exit 0
                  else
                    echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                    exit 1
                  fi
                fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5

        resources:
          limits:
            cpu: 1000m
            memory: 1500Mi
          requests:
            cpu: 500m
            memory: 1500Mi

        volumeMounts:
        - mountPath: /data
          name: elasticsearch-data

      securityContext:
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: kubernetes.io/hostname
            labelSelector:
              matchLabels:
                service: elasticsearch

      volumes:
      - name: initcontainer-script
        configMap:
          name: elasticsearch-initcontainer
          defaultMode: 0755
      - name: elasticsearch-data
        persistentVolumeClaim:
          claimName: elasticsearch-data

      restartPolicy: Always
