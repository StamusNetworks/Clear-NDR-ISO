apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-owasp-configmap
  namespace: suricata
data:
  docker-entrypoint.sh: |
    #!/bin/sh -e

    export DNS_SERVER=${DNS_SERVER:-$(grep -i '^nameserver' /etc/resolv.conf|head -n1|cut -d ' ' -f2)}

    ENV_VARIABLES=$(awk 'BEGIN{for(v in ENVIRON) print "$"v}')

    # FILES="/etc/nginx/nginx.conf /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/logging.conf /etc/nginx/includes/location_common.conf /etc/modsecurity.d/modsecurity-override.conf"
    FILES="/etc/nginx/conf.d/logging.conf /etc/nginx/includes/location_common.conf /etc/modsecurity.d/modsecurity-override.conf"

    for FILE in $FILES; do
        if [ -f "$FILE" ]; then
            envsubst "$ENV_VARIABLES" <"$FILE" | sponge "$FILE"
        fi
    done

    . /opt/modsecurity/activate-rules.sh

    exec "$@"

  request-900-exclusion-rules-before-crs.conf: |
    # The purpose of this file is to hold LOCAL exceptions for your site.  The
    # types of rules that would go into this file are one where you want to
    # short-circuit inspection and allow certain transactions to pass through
    # inspection or if you want to alter rules that are applied.

    # As a general rule:
    # ctl:ruleEngine            -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
    # ctl:ruleRemoveById        -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
    # ctl:ruleRemoveByMsg       -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
    # ctl:ruleRemoveByTag       -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
    # ctl:ruleRemoveTargetById  -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
    # ctl:ruleRemoveTargetByMsg -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
    # ctl:ruleRemoveTargetByTag -> place in REQUEST-900-EXCLUSION-RULES-BEFORE-CRS
    #
    # SecRuleRemoveById         -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
    # SecRuleRemoveByMsg        -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
    # SecRuleRemoveByTag        -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
    # SecRuleUpdateActionById   -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
    # SecRuleUpdateTargetById   -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
    # SecRuleUpdateTargetByMsg  -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS
    # SecRuleUpdateTargetByTag  -> place in RESPONSE-999-EXCLUSION-RULES-AFTER-CRS

    SecRule REMOTE_ADDR "@ipMatch 10.42.0.0/16" \
      "id:'1000',\
      phase:1,\
      pass,\
      nolog,\
      ctl:ruleEngine=off"

  response-999-exclusion-rules-after-crs.conf: |
    # The purpose of this file is to hold LOCAL exceptions for your site.  The
    # types of rules that would go into this file are one where you want
    # to unconditionally disable rules or modify their actions during startup.

  nginx.conf: |
    load_module modules/ngx_http_modsecurity_module.so;

    user nginx;
    worker_processes 1;
    # pid /tmp/nginx.pid;
    pid /var/run/nginx.pid;
    include /etc/nginx/modules-enabled/*.conf;

    events {
    	worker_connections 1024;
    }

    http {

    	##
    	# Basic Settings
    	##

    	sendfile on;
    	tcp_nopush on;
    	tcp_nodelay on;
    	keepalive_timeout 65;
    	types_hash_max_size 2048;
      client_max_body_size 20M;
    	# server_tokens off;

    	# server_names_hash_bucket_size 64;
    	# server_name_in_redirect off;

    	include /etc/nginx/mime.types;
    	default_type application/octet-stream;

    	##
    	# SSL Settings
    	##

    	ssl_protocols TLSv1.2 TLSv1.3;
      ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
      ssl_stapling off;
      ssl_stapling_verify off;
      ssl_verify_client off;

    	##
    	# Gzip Settings
    	##

    	gzip on;

    	# gzip_vary on;
    	# gzip_proxied any;
    	# gzip_comp_level 6;
    	# gzip_buffers 16 8k;
    	# gzip_http_version 1.1;
    	# gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

      ##
      # Setup rootless
      ##

      # client_body_temp_path /tmp/client_temp;
      # proxy_temp_path       /tmp/proxy_temp_path;
      # fastcgi_temp_path     /tmp/fastcgi_temp;
      # uwsgi_temp_path       /tmp/uwsgi_temp;
      # scgi_temp_path        /tmp/scgi_temp;

    	##
    	# Virtual Host Configs
    	##

    	include /etc/nginx/conf.d/*.conf;
    }

  default.conf: |
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

  selks6.conf: |
    server {

      listen 8080;
      listen 8443 ssl;
      ssl_certificate /etc/nginx/ssl/tls.crt;
      ssl_certificate_key /etc/nginx/ssl/tls.key;

      server_name SELKS;

      access_log /var/log/nginx/scirius.access.log;
      error_log /var/log/nginx/scirius.error.log;

      include /etc/nginx/includes/location_common.conf;

      # https://docs.djangoproject.com/en/dev/howto/static-files/#serving-static-files-in-production
      location /static/ { # STATIC_URL
          alias /static/; # STATIC_ROOT
          expires 30d;
      }

      location /media/ { # MEDIA_URL
          alias /static/; # MEDIA_ROOT
          expires 30d;
      }

      location /plugins/ {
          proxy_pass http://kibana.logging:5601/plugins/;
          proxy_redirect off;
      }

      location /dlls/ {
          proxy_pass http://kibana.logging:5601/dlls/;
          proxy_redirect off;
      }

      location /socket.io/ {
          proxy_pass http://kibana.logging:5601/socket.io/;
          proxy_redirect off;
      }

      location /mnt/tank/crypt/k8sset/ {
          proxy_pass http://kibana.logging:5601/mnt/tank/crypt/k8sset/;
          proxy_redirect off;
      }

      location /translations/ {
          proxy_pass http://kibana.logging:5601/translations/;
          proxy_redirect off;
      }

      location ^~ /built_assets/ {
          proxy_pass http://kibana.logging:5601/built_assets/;
          proxy_redirect off;
      }

      location /ui/ {
          proxy_pass http://kibana.logging:5601/ui/;
          proxy_redirect off;
      }

      location /spaces/ {
          proxy_pass http://kibana.logging:5601/spaces/;
          proxy_redirect off;
      }

      location /node_modules/ {
          proxy_pass http://kibana.logging:5601/node_modules/;
          proxy_redirect off;
      }

      location /bootstrap.js {
          proxy_pass http://kibana.logging:5601/bootstrap.js;
          proxy_redirect off;
      }

      location /internal/ {
          proxy_pass http://kibana.logging:5601/internal/;
          proxy_redirect off;
      }

      # location /moloch/ {
      #        proxy_pass http://arkime.suricata:8005/moloch/;
      #        proxy_redirect off;
      #    }

      location ~ "^/([\d]{5}/.*)" {
          proxy_pass http://kibana.logging:5601/$1;
          proxy_redirect off;
      }

      location / {
         proxy_pass http://scirius.suricata:80;
         proxy_read_timeout 600;
         proxy_set_header Host $http_host;
         proxy_set_header X-Forwarded-Proto https;
         proxy_redirect off;
         client_max_body_size 100M;
      }
    }
