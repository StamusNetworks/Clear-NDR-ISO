apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-configmap
  namespace: logging
data:
  logstash.conf: |
    input {
      beats {
        port => 5044
        type => "SELKS"
        codec => "json"
      }
    }

    filter {
      if [type] == "SELKS" {

        date {
          match => [ "timestamp", "ISO8601" ]
        }

        ruby {
          code => "
            if event.get('[event_type]') == 'fileinfo'
              event.set('[fileinfo][type]', event.get('[fileinfo][magic]').to_s.split(',')[0])
            end
          "
        }
        ruby {
          code => "
            if event.get('[event_type]') == 'alert'
              sp = event.get('[alert][signature]').to_s.split(' group ')
              if (sp.length == 2) and /\A\d+\z/.match(sp[1])
                event.set('[alert][signature]', sp[0])
              end
            end
          "
         }

        # Counter for eve_insert
        metrics {
          meter => [ "eve_insert" ]
          add_tag => "metric"
          flush_interval => 30
        }
      }

      if [http] {
        useragent {
           source => "[http][http_user_agent]"
           target => "[http][user_agent]"
        }
      }
      if [src_ip]  {
        geoip {
          source => "src_ip"
          target => "geoip"
          #database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
          #add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          #add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
      }
      if [dest_ip]  {
        geoip {
          source => "dest_ip"
          target => "geoip"
          #database => "/opt/logstash/vendor/geoip/GeoLiteCity.dat"
          #add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
          #add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}"  ]
        }
      }
    }

    output {
      if [event_type] and [event_type] != 'stats' {
        elasticsearch {
          hosts => "elasticsearch"
          index => "logstash-%{event_type}-%{+YYYY.MM.dd}"
          template_overwrite => true
          template => "/usr/share/logstash/config/elasticsearch7-template.json"
        }
      } else {
        elasticsearch {
          hosts => "elasticsearch"
          index => "logstash-%{+YYYY.MM.dd}"
          template_overwrite => true
          template => "/usr/share/logstash/config/elasticsearch7-template.json"
        }
      }
    }

  elasticsearch7-template.json: |
    {
      "template" : "logstash-*",
      "order": 1,
      "version" : 70002,
      "index_patterns": [
        "logstash-*"
      ],
      "settings" : {
            "index": {
          "number_of_replicas": 0,
          "refresh_interval" : "5s",
          "mapping.total_fields.limit": 10000
        },
          "analysis": {
          "analyzer": {
            "sn_analyzer": {
              "type": "custom",
              "tokenizer": "whitespace",
              "char_filter": [
                "sn_lowercase"
              ]
            }
          },
          "char_filter": {
                    "sn_lowercase": {
              "type": "mapping",
              "mappings": [
                          "A => a",                      "B => b",                      "C => c",                      "D => d",                      "E => e",                      "F => f",                      "G => g",                      "H => h",                      "I => i",                      "J => j",                      "K => k",                      "L => l",                      "M => m",                      "N => n",                      "O => o",                      "P => p",                      "Q => q",                      "R => r",                      "S => s",                      "T => t",                      "U => u",                      "V => v",                      "W => w",                      "X => x",                      "Y => y",                      "Z => z"                    ]
            }
          }
        }
      },
      "mappings" : {
        "dynamic_templates" : [ {
          "message_field" : {
            "path_match" : "message",
            "match_mapping_type" : "string",
            "mapping" : {
              "type" : "text",
              "norms" : false,
              "analyzer": "sn_analyzer",
              "search_analyzer":"sn_analyzer",
              "search_quote_analyzer":"sn_analyzer"
            }
          }
        }, {
          "string_fields" : {
            "match" : "*",
            "match_mapping_type" : "string",
            "mapping" : {
              "type" : "text", "norms" : false,
              "analyzer": "sn_analyzer",
              "search_analyzer":"sn_analyzer",
              "search_quote_analyzer":"sn_analyzer",
              "fields" : {
                "keyword" : { "type": "keyword", "ignore_above": 256 },
                "raw" : { "type": "keyword", "ignore_above": 256 }
              }
            }
          }
        }, {
          "percentage_fields_long_to_float": {
            "path_match": "*.pct",
            "match_mapping_type": "long",
            "mapping": {
              "type": "float"
            }
          }
        } ],
        "properties" : {
          "@timestamp": { "type": "date" },
          "@version": { "type": "keyword" },
          "geoip"  : {
            "dynamic": true,
            "properties" : {
              "ip": { "type": "ip" },
              "location" : { "type" : "geo_point" },
              "latitude" : { "type" : "half_float" },
              "longitude" : { "type" : "half_float" }
            }
          },
          "discovery"  : {
            "dynamic": true,
            "properties" : {
              "asset": {
                "type": "ip",
                "fields": {
                  "raw": {"type": "keyword"},
                  "keyword": {"type": "keyword"}
                }
              }
            }
          },
          "dest_ip": {
              "type": "ip",
              "fields": {
                  "raw": {"type": "keyword"},
                  "keyword": {"type": "keyword"}
               }
          },
          "src_ip": {
              "type": "ip",
              "fields": {
                  "raw": {"type": "keyword"},
                  "keyword": {"type": "keyword"}
               }
          },
          "cpu": {
            "properties": {
              "system_p": {
                "doc_values": "true",
                "type": "float"
              },
              "user_p": {
                "doc_values": "true",
                "type": "float"
              }
            }
          },
          "fs": {
            "properties": {
              "used_p": {
                "doc_values": "true",
                "type": "float"
              }
            }
          },
          "load": {
            "properties": {
              "load1": {
                "doc_values": "true",
                "type": "float"
              },
              "load15": {
                "doc_values": "true",
                "type": "float"
              },
              "load5": {
                "doc_values": "true",
                "type": "float"
              }
            }
          },
          "mem": {
            "properties": {
              "actual_used_p": {
                "doc_values": "true",
                "type": "float"
              },
              "used_p": {
                "doc_values": "true",
                "type": "float"
              }
            }
          },
          "proc": {
            "properties": {
              "cpu": {
                "properties": {
                  "user_p": {
                    "doc_values": "true",
                    "type": "float"
                  }
                }
              },
              "mem": {
                "properties": {
                  "rss_p": {
                    "doc_values": "true",
                    "type": "float"
                  }
                }
              }
            }
          },
          "swap": {
            "properties": {
              "used_p": {
                "doc_values": "true",
                "type": "float"
              }
            }
          },
          "ip": {
            "type": "ip"
          },
          "alert": {
            "properties": {
              "source": {
                "properties": {
                  "ip": {
                    "type": "ip",
                    "fields": {
                      "keyword": {"type": "keyword"}
                    }
                  }
                }
              },
              "target": {
                "properties": {
                  "ip": {
                    "type": "ip",
                    "fields": {
                      "keyword": {"type": "keyword"}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
